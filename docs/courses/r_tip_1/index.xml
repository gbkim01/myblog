<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>개요 | 日常茶飯事</title>
    <link>/courses/r_tip_1/</link>
      <atom:link href="/courses/r_tip_1/index.xml" rel="self" type="application/rss+xml" />
    <description>개요</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 본 블로그에 게시된 모든 컨텐츠의 저작권은 블로그 주인에게 있습니다.</copyright><lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon-32.png</url>
      <title>개요</title>
      <link>/courses/r_tip_1/</link>
    </image>
    
    <item>
      <title>1. Target 페이지 식별</title>
      <link>/courses/r_tip_1/1_target-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%8B%9D%EB%B3%84/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/courses/r_tip_1/1_target-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%8B%9D%EB%B3%84/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#페이지-속의-페이지&#34;&gt;&lt;strong&gt;페이지 속의 페이지??&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#네트워크-탭에서-서버와-브라우저-사이에-오가는-신호를-확인하자&#34;&gt;&lt;strong&gt;네트워크 탭에서 서버와 브라우저 사이에 오가는 신호를 확인하자!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#url은-어디에&#34;&gt;&lt;strong&gt;URL은 어디에???&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#몇가지-추가&#34;&gt;&lt;strong&gt;몇가지 추가&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#개발자도구-네트워크-탭에-대한-팁&#34;&gt;개발자도구 네트워크 탭에 대한 팁…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#인터넷-주소의-구성&#34;&gt;인터넷 주소의 구성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;크롤링에서 가장 먼저 해야 할 작업은 원하는 자료가 위치한 &lt;strong&gt;웹 페이지 주소&lt;/strong&gt;를 정확하게 파악하는 것입니다. 물론 주소표시줄을 확인하는 것만으로도 대부분 해결할 수 있는 문제이긴 합니다. 그러나 세상 일이 그렇게 간단치는 않죠. 예외적인 상황이 많기 때문에 브라우저의 구조와 작동원리를 좀 더 자세히 살펴볼 필요가 있습니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;페이지-속의-페이지&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;페이지 속의 페이지??&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;인터넷을 통해 우리가 눈으로 확인하는 내용은 한 페이지의 문서에 불과합니다. 그러나 그 한 페이지의 문서를 실제로 웹브라우저에 구현하기 위해, 브라우저 내부에서는 눈에 보이지 않는 많은 일이 벌어지고 있습니다. 목표로 하는 정보가 표시된 웹 문서의 정확한 URL을 확인하려면, 무엇보다도 브라우저 내부의 동작 및 서버와 브라우저 사이에 오가는 신호를 체크해야 합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;네이버 증권&lt;/strong&gt;에서 &lt;a href=&#34;https://finance.naver.com/sise/sise_index.nhn?code=KOSPI&#34;&gt;&lt;strong&gt;KOSPI 지수 일별 시세&lt;/strong&gt;&lt;/a&gt;의
지난 10년치 기록을 가져온다고 가정해 봅시다. 처음 주소창에 &lt;a href=&#34;https://finance.naver.com/sise/sise_index.nhn?code=KOSPI&#34;&gt;&lt;strong&gt;네이버 증권 국내증시&lt;/strong&gt;&lt;/a&gt;의 주소를 입력하고 해당 페이지로 이동&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; 한 후
&lt;strong&gt;&lt;code&gt;F12키&lt;/code&gt;&lt;/strong&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;를 누르면 Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;과 같은 화면이 나옵니다.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/30010992/89721986-a1ffee80-da1e-11ea-9af8-c66eb549e81a.jpg&#34; alt=&#34;웹 페이지 구성&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: 웹 페이지 구성
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;에서 KOSPI 일별 시세에 대한 정보는 페이지 하단의 &lt;strong&gt;2번&lt;/strong&gt; 구역에 위치하고 있습니다. 가만히 살펴보니 첫 화면에서는 최근 6일에 대한 시세 정보만 제공하고 있네요. 최근 6일치 말고 그보다 더 전의 시세에 대한 기록을 찾아보려면 &lt;strong&gt;3번&lt;/strong&gt;위치에 있는 페이지 숫자를 일일이 마우스로 클릭해야 합니다. 페이지 숫자를 클릭할때마다 예전 시세정보를 6일치씩 끊어서 볼 수 있도록 사이트가 구성되어 있습니다.&lt;/p&gt;
&lt;p&gt;근데 &lt;strong&gt;3번&lt;/strong&gt;의 페이지를 누른다고 해서 &lt;strong&gt;1번&lt;/strong&gt;주소표시줄의 URL이 변경된다거나 그러지는 않습니다. &lt;strong&gt;3번&lt;/strong&gt; 페이지를 클릭하면 새로운 일별시세 정보가 갱신되는데 주소표시줄의 URL은 그대로입니다. 즉, &lt;strong&gt;1번&lt;/strong&gt; 주소표시줄만 봐서는 과거 KOSPI 시세 정보를 노출시키는 URL을 정확하게 알 수 없는 상황입니다. 이때 봐야할 곳이 웹브라우저의 &lt;strong&gt;개발자도구&lt;/strong&gt;의 &lt;strong&gt;네트워크&lt;/strong&gt; 탭입니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;네트워크-탭에서-서버와-브라우저-사이에-오가는-신호를-확인하자&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;네트워크 탭에서 서버와 브라우저 사이에 오가는 신호를 확인하자!&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;크롬에서 &lt;strong&gt;&lt;code&gt;F12키&lt;/code&gt;&lt;/strong&gt;를 누르면 개발자도구가 활성화 됩니다. Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;의 오른편 처럼 말입니다. 가장 처음 확인해봐야 할 것이 &lt;strong&gt;4번&lt;/strong&gt; 위치의 &lt;strong&gt;네트워크&lt;/strong&gt; 부분입니다. 인터넷을 할 때, 웹 브라우저를 통해 서버와 신호를 주고받는데 &lt;strong&gt;네트워크&lt;/strong&gt; 에는 서버와 브라우저 사이에 오가는 모든 신호정보가 표시됩니다. 즉, 코스피 지수의 과거 시세 정보를 보기 위해 &lt;strong&gt;3&lt;/strong&gt;번의 페이지 숫자를 클릭하여 시세 정보를 갱신하게 되면 그 신호 정보가 &lt;strong&gt;네트워크&lt;/strong&gt;에 표시된다는 이야기 입니다.그럼 다시 코스피 시세정보의 URL을 어떻게 확인할 수 있는지 확인해 보도록 합니다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;strong&gt;3번&lt;/strong&gt; 에서 숫자 4를 클릭해 봅시다. 그러자 &lt;strong&gt;6번&lt;/strong&gt;에 새롭게 서버에서 내려받는 정보가 하단으로 주르륵 표시되기 시작합니다. 새로 받은 신호정보를 위에서 부터 차근차근 보니 &lt;strong&gt;7번&lt;/strong&gt;의 &lt;code&gt;sise_index_day.nhn?code=KOSPI&amp;amp;page=4&lt;/code&gt;이 눈에 보이네요. 맨 앞에는 &lt;code&gt;sise_index&lt;/code&gt;라고 적혀있고 뒤로는 &lt;code&gt;code=KOSPI&lt;/code&gt;, &lt;code&gt;page=4&lt;/code&gt;라는 단어가 보입니다. 누가 봐도 시세정보를 나타내는게 아닌가 싶을 정도로 명확하게 적혀있네요. 시험삼아 &lt;strong&gt;3번&lt;/strong&gt; 에서 숫자 5부터 7까지 눌러보면서 다시 개발자도구에 올라오는 정보를 확인해봅시다. 차례대로 다음과 인덱스 주소를 확인할 수 있을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sise_index_day.nhn?code=KOSPI&amp;amp;page=5&lt;/li&gt;
&lt;li&gt;sise_index_day.nhn?code=KOSPI&amp;amp;page=6&lt;/li&gt;
&lt;li&gt;sise_index_day.nhn?code=KOSPI&amp;amp;page=7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;뭔가 규칙성을 확인할 수 있지 않습니까? 맞습니다. &lt;code&gt;sise_index_day.nhn?code=KOSPI&amp;amp;&lt;/code&gt; 까지는 동일하고 페이지 숫자를 누를 때마다 &lt;code&gt;page=5&lt;/code&gt; 숫자만 바뀌는 것을 알 수 있습니다. 여기까지 왔다면 사실 거의 다 끝났습니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;url은-어디에&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;URL은 어디에???&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;그런데 앞에서 확인한 &lt;code&gt;sise_index_day.nhn?code=KOSPI&amp;amp;page=4&lt;/code&gt;는 인터넷 주소처럼 생기진 않았습니다. 무릇 인터넷 주소라면 &lt;code&gt;https://&lt;/code&gt;나 &lt;code&gt;www&lt;/code&gt;로 시작해야 하는데 이건 그렇진 않죠. 그렇다면 정확한 URL은 어디서 확인해야 하는냐? 그건 Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;의 &lt;strong&gt;8번&lt;/strong&gt; 항목의 머리글 탭&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;에서 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;의 &lt;strong&gt;8번&lt;/strong&gt; 항목을 살펴보먄 &lt;strong&gt;요청URL&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/strong&gt;이라고 해서 &lt;code&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=4&lt;/code&gt;이라는 URL 정보가 나옵니다. 이 주소가 네이버에서 제공하는 KOSPI 일별시세 정보의 4번째 페이지에 해당되는 정보입니다. 바로 그 밑으로 &lt;strong&gt;요청 메서드 : GET&lt;/strong&gt;, &lt;strong&gt;상태 코드 : 200&lt;/strong&gt; 등등의 정보가 있는데 이러한 내용은 다음 번에 설명하겠습니다.&lt;/p&gt;
&lt;p&gt;각설하고, 해당 URL을 인터넷 주소창에 입력해 보면 다음의 그림처럼 표시될 겁니다.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs2&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/30010992/89721985-9e6c6780-da1e-11ea-93fa-4d754b743783.jpg&#34; alt=&#34;KOSPI 일별시세 정보표시&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: KOSPI 일별시세 정보표시
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure&lt;a href=&#34;#fig:figs2&#34;&gt;2&lt;/a&gt;는 Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;에서 표시되는 잡다한 정보를 제거하고 일별시세 정보만 덩그러니 놓여있습니다. Figure&lt;a href=&#34;#fig:figs2&#34;&gt;2&lt;/a&gt;에서 1번 페이지 부터 5번 페이지 까지 클릭하면서 주소표시줄의 URL의 변화를 살펴보면 다음과 같을 것입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=1&#34; class=&#34;uri&#34;&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=2&#34; class=&#34;uri&#34;&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=3&#34; class=&#34;uri&#34;&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=4&#34; class=&#34;uri&#34;&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=5&#34; class=&#34;uri&#34;&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;page=5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;https://finance.naver.com/sise/sise_index_day.nhn?code=KOSPI&amp;amp;&lt;/code&gt; 까지는 동일하고 &lt;code&gt;page=5&lt;/code&gt;의 페이지 번호만 변경되는 것을 확인할 수 있을 것입니다. 이제 네이버에서 제공하는 KOSPI 일별시세 정보의 정확한 주소를 확인했습니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;몇가지-추가&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;몇가지 추가&lt;/strong&gt;&lt;/h2&gt;
&lt;div id=&#34;개발자도구-네트워크-탭에-대한-팁&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;개발자도구 네트워크 탭에 대한 팁…&lt;/h3&gt;
&lt;p&gt;Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;의 개발자도구 네트워크 탭에서 &lt;strong&gt;5번&lt;/strong&gt;의 “모두” 항목에 표시되는 정보로 부터 내가 원하는 정확한 신호정보를 찾기란 쉬운게 아닙니다. “모두” 항목은 말 그대로 브라우저에 표시되는 정보의 모든 신호를 표기하기 때문에 웹페이지 하나를 띄울 때마다 엄청난 양의 신호정보가 쌓이기 때문입니다. 좀 더 편하게 확인하려면 &lt;strong&gt;5번&lt;/strong&gt;항목 옆으로 보이는 XHR, CSS,… 등등을 클릭하면서 확인해 보는 것이 좋습니다. 웹페이지 신호를 정보 유형별로 구분해서 보여주기 때문에 내가 찾는 신호를 찾기가 훨씬 수월할 것입니다.&lt;/p&gt;
&lt;p&gt;이번 포스트에서 다룬 네이버 KOSPI 일별시세의 경우 &lt;strong&gt;5번&lt;/strong&gt;항목의 “문서&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;”탭에 나타나 있습니다. 아래의 Figure&lt;a href=&#34;#fig:figs3&#34;&gt;3&lt;/a&gt;이 “문서”항목에서 신호정보를 확인한 것인데 Figure&lt;a href=&#34;#fig:figs1&#34;&gt;1&lt;/a&gt;에서 보다 훨씬 간단하게 일별시세에 대한 신호가 식별됩니다.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/30010992/89721987-a5937580-da1e-11ea-8d2f-4e8ed85d094d.jpg&#34; alt=&#34;네트워크의 &#39;문서&#39;항목&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: 네트워크의 ’문서’항목
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;인터넷-주소의-구성&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;인터넷 주소의 구성&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;이후의 웹 페이지에 대한 모든 설명은 &lt;strong&gt;구글 크롬 브라우저&lt;/strong&gt;를 기준으로 합니다. 파이어폭스나 엣지브라우저에서도 동일한 기능을 제공하고 동일한 순서로 크롤링이 진행되지만 보통 인터넷 검색을 통해 얻을 수 있는 대부분의 팁이 크롬을 기준으로 하고 있기 때문에 크롬에 익숙해 지면 향후 혼자서 정보검색할 때에도 편리하다는 장점이 있습니다.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;웹 브라우저의 개발자도구를 표시합니다.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;영문판에서는 “header”로 표기되기도 합니다.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;영문판에서는 “Request URL”로 표시됩니다&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;영문으로는 &#34;DOC&#34; 입니다.&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2. 요청과 응답</title>
      <link>/courses/r_tip_1/2-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/courses/r_tip_1/2-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#request요청&#34;&gt;&lt;strong&gt;Request(요청)&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#get-요청&#34;&gt;GET 요청&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#post-요청&#34;&gt;POST 요청&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#response응답&#34;&gt;&lt;strong&gt;Response(응답)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs1&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://miro.medium.com/max/875/1*8-fT6K1o6nHiBRxKppcqOg.png&#34; alt=&#34;Request와 Response^[출처 : https://medium.com/@rohitpatil97/http-request-http-response-context-and-headers-part-iii-5c37bd4cb06b]&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Request와 Response&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;본격적으로 크롤링을 하기 전에 웹브라우저가 하는 역할을 살펴봅시다.&lt;/p&gt;
&lt;p&gt;IE, 크롬, 파이어폭스 같은 웹브라우저는 &lt;strong&gt;1. 서버에 원하는 정보를 요청&lt;/strong&gt;하고 &lt;strong&gt;2. 서버로 부터 원하는 정보(HTML 형식)를 내려받아&lt;/strong&gt;, &lt;strong&gt;3. HTML 문서를 일반 문서형태로 전환&lt;/strong&gt;해서 보여주는 기능을 수행합니다. 좀 더 풀어서 설명하면 인터넷을 할 때, 브라우저의 주소창에 주소를 입력하고, 엔터를 치거나 마우스를 클릭하는 행위를 통해 서버에 정보를 요청하는 신호를 보내고, 눈에 보이진 않지만 인터넷 연결망의 저편에 있는 서버로 부터 요청한 정보를 내려받으면 브라우저가 알아서 문서로 변환해 보여주는 것입니다. 우리가 인터넷을 하는 대부분의 행위가 이런 방식으로 진행됩니다.&lt;/p&gt;
&lt;p&gt;이 때, 정보를 서버에 요청하는 것을 Request(요청)라 하고, 서버로 부터 정보를 내려받는 것을 Response(응답)이라고 합니다. 크롤링을 할 때는 웹브라우저 대신에 R과 Rstudio가 이 이 두 가지 기능&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;을 수행하게 됩니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;request요청&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Request(요청)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;인터넷의 Request(요청)은 HTTP 전송 프로토콜을 따릅니다. 따라서 R에서도 마찬가지로 HTTP 전송 규격에 맞게 요청 신호를 서버에 보내야 합니다. HTTP 요청 메서드는 다음의 Figure&lt;a href=&#34;#fig:figs2&#34;&gt;2&lt;/a&gt;에서와 같이 4~5 가지로 구분할 수 있는데, 우리가 꼭 알아야 할 것은 &lt;strong&gt;GET&lt;/strong&gt;과 &lt;strong&gt;POST&lt;/strong&gt;입니다&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs2&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://miro.medium.com/max/875/1*xJEUm1hUvxppvcjY14IKQA.jpeg&#34; alt=&#34;HTTP 메서드 종류^[출처 : https://medium.com/@NikiMichaelsonqiv/http-methods-get-vs-post-b3ffb60c7f55]&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: HTTP 메서드 종류&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-요청&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;GET 요청&lt;/h3&gt;
&lt;div id=&#34;get-요청의-예&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;GET 요청의 예&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;post-요청&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;POST 요청&lt;/h3&gt;
&lt;div id=&#34;post-요청의-예&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;POST 요청의 예&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;GET vs POST

HTTP POST 요청은 클라이언트에서 서버로 전송할 때 추가적인 데이터를 body에 포함할 수 있다. 

반면에 GET 요청은 모든 필요한 데이터를 URL에 포함하여 요청한다. 

HTML의 &amp;lt;form&amp;gt;태그에 method=&amp;quot;POST&amp;quot; 또는 method=&amp;quot;GET&amp;quot;(기본값)을 모두 사용할 수 있다.

만약에 GET 메소드를 사용하면 모든 form data는 URL로 인코딩되어 action URL에 query string parameters로 전달된다. 

POST 메소드를 사용하면 form data는 HTTP request의 message body에 나타날 것이다.

출처: https://im-developer.tistory.com/166 [Code Playground]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;response응답&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Response(응답)&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:figs3&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://i1.wp.com/csharpcorner.mindcrackerinc.netdna-cdn.com/article/create-api-with-asp-net-core-day-three-working-with-http-status-codes-in-asp/Images/image002.jpg?zoom=2&#34; alt=&#34;HTTP 상태 코드^[출처 : https://codeteddy.com/2017/06/06/create-api-with-asp-net-core-day-3-working-with-http-status-codes-in-asp-net-core-api/]&#34;  /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: HTTP 상태 코드&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;준비중&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;출처 : &lt;a href=&#34;https://medium.com/@rohitpatil97/http-request-http-response-context-and-headers-part-iii-5c37bd4cb06b&#34; class=&#34;uri&#34;&gt;https://medium.com/@rohitpatil97/http-request-http-response-context-and-headers-part-iii-5c37bd4cb06b&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;크롤링에서 HTML문서를 일반문서로 변환하는 과정은 필요치 않습니다. 대신 HTML 문서를 분석(parsing)하여 원하는 정보를 뽑아내는 과정이 필요한데 이 부분은 다음 글에서 설명하겠습니다.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;경험상 GET과 POST 외의 다른 요청 메서드는 보지 못했습니다.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;출처 : &lt;a href=&#34;https://medium.com/@NikiMichaelsonqiv/http-methods-get-vs-post-b3ffb60c7f55&#34; class=&#34;uri&#34;&gt;https://medium.com/@NikiMichaelsonqiv/http-methods-get-vs-post-b3ffb60c7f55&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;출처 : &lt;a href=&#34;https://codeteddy.com/2017/06/06/create-api-with-asp-net-core-day-3-working-with-http-status-codes-in-asp-net-core-api/&#34; class=&#34;uri&#34;&gt;https://codeteddy.com/2017/06/06/create-api-with-asp-net-core-day-3-working-with-http-status-codes-in-asp-net-core-api/&lt;/a&gt;&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
